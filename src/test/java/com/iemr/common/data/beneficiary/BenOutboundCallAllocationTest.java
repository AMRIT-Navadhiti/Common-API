package com.iemr.common.data.beneficiary;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.Mockito.mock;

import com.iemr.common.data.callhandling.OutboundCallRequest;
import com.iemr.common.data.institute.Designation;
import com.iemr.common.data.service.SubService;
import com.iemr.common.data.userbeneficiarydata.Gender;
import com.iemr.common.data.userbeneficiarydata.MaritalStatus;
import com.iemr.common.data.userbeneficiarydata.Status;
import com.iemr.common.data.userbeneficiarydata.Title;
import com.iemr.common.data.users.ProviderServiceMapping;
import com.iemr.common.data.users.ServiceMaster;
import com.iemr.common.data.users.ServiceProvider;
import com.iemr.common.data.users.User;
import com.iemr.common.model.beneficiary.BeneficiaryModel;
import com.iemr.common.utils.mapper.OutputMapper;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
@ExtendWith(MockitoExtension.class)
class BenOutboundCallAllocationTest {
  
    @Test
    void testGettersAndSetters() {
        // Arrange
        BenOutboundCallAllocation benOutboundCallAllocation = new BenOutboundCallAllocation();

        // Act
        benOutboundCallAllocation.setAllocateNo(1);
        ProviderServiceMapping service = new ProviderServiceMapping();
        service.setAPIMANClientID("A PIMANClient ID");
        service.setAPIMANClientKey("A PIMANClient Key");
        service.setAddress("42 Main St");
        service.setBlockNumbers(new ArrayList<>());
        service.setCityID(1);
        service.setCountryID(1);
        service.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        service.setCreatedDate(mock(Timestamp.class));
        service.setCtiCampaignName("Cti Campaign Name");
        service.setDeleted(true);
        service.setDirectories(new ArrayList<>());
        service.setDistrictBlockID(1);
        service.setDistrictID(1);
        service.setEmergencyContacts(new ArrayList<>());
        service.setFeedbackSeverities(new ArrayList<>());
        service.setFeedbacks(new ArrayList<>());
        service.setIsDialPreferenceManual(true);
        service.setLastModDate(mock(Timestamp.class));
        service.setM_ServiceMaster(new ServiceMaster());
        service.setM_UserServiceRoleMappings(new ArrayList<>());
        service.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        service.setNotifications(new ArrayList<>());
        service.setOutputMapper(new OutputMapper());
        service.setPreviewWindowTime(1);
        service.setProviderServiceMapID(1);
        service.setScreens(new ArrayList<>());
        service.setServiceID((short) 1);
        service.setServiceProvider(new ServiceProvider());
        service.setServiceProviderID((short) 1);
        service.setServiceRoleScreenMapping(new ArrayList<>());
        service.setStateID(1);
        service.setStatus(new Status());
        service.setStatusID(1);
        SubService requestedService = new SubService();
        requestedService.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        requestedService.setCreatedDate(mock(Timestamp.class));
        requestedService.setDeleted(true);
        requestedService.setLastModDate(mock(Timestamp.class));
        requestedService.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        requestedService.setOutputMapper(new OutputMapper());
        requestedService.setProviderServiceMapID(1);
        requestedService.setService(service);
        requestedService.setSubServiceDesc("Sub Service Desc");
        requestedService.setSubServiceID(1);
        requestedService.setSubServiceName("Sub Service Name");
        Designation designation = new Designation();
        designation.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        designation.setCreatedDate(mock(Timestamp.class));
        designation.setDeleted(true);
        designation.setDesignationDesc("Designation Desc");
        designation.setDesignationID(1);
        designation.setDesignationName("Designation Name");
        designation.setFeedbackDetails(new HashSet<>());
        designation.setLastModDate(mock(Timestamp.class));
        designation.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        designation.setOutputMapper(new OutputMapper());
        designation.setUsers(new HashSet<>());
        Gender m_gender = new Gender();
        m_gender.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        m_gender.setCreatedDate(mock(Timestamp.class));
        m_gender.setDeleted(true);
        m_gender.setGenderID(1);
        m_gender.setGenderName("Gender Name");
        m_gender.setI_beneficiary(new HashSet<>());
        m_gender.setLastModDate(mock(Timestamp.class));
        m_gender.setM_user(new HashSet<>());
        m_gender.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        m_gender.setOutputMapper(new OutputMapper());
        MaritalStatus m_maritalstatus = new MaritalStatus();
        m_maritalstatus.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        m_maritalstatus.setCreatedDate(mock(Timestamp.class));
        m_maritalstatus.setDeleted(true);
        m_maritalstatus.setI_beneficiary(new HashSet<>());
        m_maritalstatus.setLastModDate(mock(Timestamp.class));
        m_maritalstatus.setM_user(new HashSet<>());
        m_maritalstatus.setMaritalStatusID(1);
        m_maritalstatus.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        m_maritalstatus.setOutputMapper(new OutputMapper());
        m_maritalstatus.setStatus("Status");
        m_maritalstatus.setStatusDesc("Status Desc");
        Status m_status = new Status();
        m_status.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        m_status.setCreatedDate(mock(Timestamp.class));
        m_status.setDeleted(true);
        m_status.setI_Beneficiaries(new HashSet<>());
        m_status.setLastModDate(mock(Timestamp.class));
        m_status.setM_Users(new HashSet<>());
        m_status.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        m_status.setOutputMapper(new OutputMapper());
        m_status.setProviderServiceMappings(new HashSet<>());
        m_status.setServiceProviders(new HashSet<>());
        m_status.setStatus("Status");
        m_status.setStatusDesc("Status Desc");
        m_status.setStatusID(1);
        Title m_title = new Title();
        m_title.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        m_title.setCreatedDate(mock(Timestamp.class));
        m_title.setDeleted(true);
        m_title.setI_beneficiary(new HashSet<>());
        m_title.setLastModDate(mock(Timestamp.class));
        m_title.setM_user(new HashSet<>());
        m_title.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        m_title.setOutputMapper(new OutputMapper());
        m_title.setTitleDesc("Dr");
        m_title.setTitleID(1);
        m_title.setTitleName("Dr");
        User user = new User();
        user.setAadhaarNo("Aadhaar No");
        user.setAgentID("Agent ID");
        user.setAgentPassword("iloveyou");
        user.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        user.setCreatedDate(mock(Timestamp.class));
        user.setDeleted(true);
        user.setDesignation(designation);
        user.setDesignationID(1);
        user.setEmailID("jane.doe@example.org");
        user.setEmergencyContactNo("Emergency Contact No");
        user.setEmergencyContactPerson("Emergency Contact Person");
        user.setFailedAttempt(1);
        user.setFeedbackDetails(new HashSet<>());
        user.setFirstName("Jane");
        user.setGenderID(1);
        user.setIsSupervisor(true);
        user.setLastModDate(mock(Timestamp.class));
        user.setLastName("Doe");
        user.setM_UserLangMappings(new HashSet<>());
        user.setM_UserServiceRoleMapping(new ArrayList<>());
        user.setM_gender(m_gender);
        user.setM_maritalstatus(m_maritalstatus);
        user.setM_status(m_status);
        user.setM_title(m_title);
        user.setMaritalStatusID(1);
        user.setMiddleName("Middle Name");
        user.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        user.setNewPassword("iloveyou");
        user.setOutPutMapper(new OutputMapper());
        user.setOutboundCallRequests(new HashSet<>());
        user.setPassword("iloveyou");
        user.setQualificationID(1);
        user.setRoleMappings(new HashSet<>());
        user.setStatusID(1);
        user.setTitleID(1);
        user.setUserID(1L);
        user.setUserName("janedoe");
        user.setdOB(mock(Timestamp.class));
        user.setdOJ(mock(Timestamp.class));
        user.setpAN("P AN");
        OutboundCallRequest outboundCallRequest = new OutboundCallRequest();
        outboundCallRequest.setAssignedUserID(1);
        outboundCallRequest.setBenCallID(1L);
        outboundCallRequest.setBeneficiary(new BeneficiaryModel());
        outboundCallRequest.setBeneficiaryRegID(1L);
        outboundCallRequest.setCallTypeID(1);
        outboundCallRequest.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        outboundCallRequest.setCreatedDate(mock(Timestamp.class));
        outboundCallRequest.setDeleted(true);
        outboundCallRequest.setFilterEndDate(mock(Timestamp.class));
        outboundCallRequest.setFilterStartDate(mock(Timestamp.class));
        outboundCallRequest.setIs1097(true);
        outboundCallRequest.setIsCompleted(true);
        outboundCallRequest.setIsSelf(true);
        outboundCallRequest.setLastModDate(mock(Timestamp.class));
        outboundCallRequest.setModifiedBy(true);
        outboundCallRequest.setNoOfTrials(1);
        outboundCallRequest.setOutboundCallReqID(1L);
        outboundCallRequest.setOutboundCallReqIDs(new ArrayList<>());
        outboundCallRequest.setOutputMapper(new OutputMapper());
        outboundCallRequest.setPreferredLanguageName("en");
        outboundCallRequest.setPrefferedDateTime(mock(Timestamp.class));
        outboundCallRequest.setProviderServiceMapID(1);
        outboundCallRequest.setReceivedRoleName("Received Role Name");
        outboundCallRequest.setRequestNo("Request No");
        outboundCallRequest.setRequestedFeature("Requested Feature");
        outboundCallRequest.setRequestedFor("Requested For");
        outboundCallRequest.setRequestedService(requestedService);
        outboundCallRequest.setRequestedServiceID(1);
        outboundCallRequest.setUser(user);
        OutboundCallRequest[] outboundCallRequests = new OutboundCallRequest[]{outboundCallRequest};
        benOutboundCallAllocation.setOutboundCallRequests(outboundCallRequests);
        ArrayList<Integer> userID = new ArrayList<>();
        benOutboundCallAllocation.setUserID(userID);
        Integer actualAllocateNo = benOutboundCallAllocation.getAllocateNo();
        OutboundCallRequest[] actualOutboundCallRequests = benOutboundCallAllocation.getOutboundCallRequests();
        List<Integer> actualUserID = benOutboundCallAllocation.getUserID();

        // Assert that nothing has changed
        assertEquals(1, actualAllocateNo.intValue());
        assertSame(userID, actualUserID);
        assertSame(outboundCallRequests, actualOutboundCallRequests);
    }
}
